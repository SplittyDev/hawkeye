import styled from 'styled-components'
import PropTypes, { InferProps } from 'prop-types'
import React, { useState, useEffect } from 'react'
import { useRecoilState } from 'recoil'
import { has, set, cloneDeep } from "lodash"

import { widgetSettingsState } from 'state'
import { GenericProps, WidgetOptionDefaultValuePropType, WidgetPropType } from 'customPropTypes'

const serdeCheckBoxPropTypes = {
  optionKey: PropTypes.string.isRequired,
  defaultValue: WidgetOptionDefaultValuePropType.isRequired,
  serialize: PropTypes.func.isRequired,
  deserialize: PropTypes.func.isRequired,
}

const serdeTextBoxPropTypes = {
  optionKey: PropTypes.string.isRequired,
  defaultValue: WidgetOptionDefaultValuePropType.isRequired,
  serialize: PropTypes.func.isRequired,
  deserialize: PropTypes.func.isRequired,
}

/**
 * A checkbox made for de/serializing its value with respect to the default value.
 */
export const SerdeCheckBox = ({ optionKey, defaultValue, serialize, deserialize }: InferProps<typeof serdeCheckBoxPropTypes>) => {
  const [checked, setChecked] = useState(deserialize(optionKey, defaultValue))

  useEffect(() => {
    setChecked(deserialize(optionKey, defaultValue))
  }, [optionKey, defaultValue, deserialize])

  const toggle = () => {
    setChecked(!checked)
    serialize(optionKey, !checked)
  }

  return (
    <input type="checkbox" checked={checked} onChange={toggle} />
  )
}

SerdeCheckBox.propTypes = serdeCheckBoxPropTypes

/**
 * A text input made for de/serializing its value with respect to the default value.
 */
export const SerdeTextBox = ({ optionKey, defaultValue, serialize, deserialize }: InferProps<typeof serdeTextBoxPropTypes>) => {
  const [value, setValue] = useState(deserialize(optionKey, defaultValue))

  useEffect(() => {
    setValue(deserialize(optionKey, defaultValue))
  }, [optionKey, defaultValue, deserialize])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value)
    serialize(optionKey, e.target.value)
  }

  return (
    <input type="text" value={value} onInput={handleChange} />
  )
}

SerdeTextBox.propTypes = serdeTextBoxPropTypes

const WidgetSettingsPropTypes = {
  widget: WidgetPropType.isRequired,
}

/**
 * Configuration dialog for widgets.
 *
 * Features autogenerated UI with automatic de/serialialization.
 */
const WidgetSettings = ({ className, widget }: GenericProps<typeof WidgetSettingsPropTypes>) => {
  const [widgetSettings, setWidgetSettings] = useRecoilState(widgetSettingsState)

  const serialize = (key: string, value: any) => {
    const newValue = set(cloneDeep(widgetSettings), `${widget.instanceId}.${key}`, value)
    setWidgetSettings(newValue)
  }

  const deserialize = (key: string, defaultValue: any) => {
    if (!has(widgetSettings, `${widget.instanceId}.${key}`)) {
      return defaultValue
    }
    return widgetSettings[widget.instanceId!][key]
  }

  return (
    <div className={className}>
      <div className="title">Settings for <span className="widgetName">{ widget.name }</span> widget</div>
      { Object.entries(widget?.options ?? {}).map(([key, { name = null, type = "invalid", defaultValue = null }]) => {
        return (
          <div className="row" key={`${widget.instanceId}-${key}`}>
            <div className="name">{ name ?? key }</div>
            { type === 'bool' && (
              <SerdeCheckBox
                key={`${widget.instanceId}-${key}`}
                optionKey={key}
                defaultValue={!!defaultValue}
                serialize={serialize}
                deserialize={deserialize}
              />
            )}
            { type === 'string' && (
              <SerdeTextBox
                key={`${widget.instanceId}-${key}`}
                optionKey={key}
                defaultValue={defaultValue || ''}
                serialize={serialize}
                deserialize={deserialize}
              />
            )}
          </div>
        )
      }) }
    </div>
  )
}

const WidgetSettingsStyled = styled(WidgetSettings)`
  display: flex;
  flex-flow: column nowrap;
  gap: .5rem;

  & .title {
    margin-bottom: .5rem;

    & .widgetName {
      font-weight: bold;
    }
  }

  & .row {
    display: flex;
    flex-flow: row nowrap;
    justify-content: space-between;
    align-items: center;
  }
`

WidgetSettingsStyled.propTypes = WidgetSettingsPropTypes

export default WidgetSettingsStyled
